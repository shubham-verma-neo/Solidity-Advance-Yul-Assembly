{
	"id": "a17a5793c55e75ecd51367c9caf3c853",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Yul",
		"sources": {
			"contracts/10_pureYul.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\n    /*\n\n    To Learn\n\n    - constructor\n    - yul doesn't have to respect the calldata\n    - how compile yul\n    - how to interacte with the yul\n    - custom code in the constructor\n\n    */\n\nobject \"Simple\" {\n\n    code{\n        datacopy(0, dataoffset(\"runtime\"), datasize(\"runtime\"))\n        return(0, datasize(\"runtime\"))\n    }\n\n    object \"runtime\"{\n        // code{\n        //     mstore(0x00, 2)\n        //     return(0x00, 0x20)\n        // }\n\n        code{\n            datacopy(0x00, dataoffset(\"Message\"), datasize(\"Message\"))\n            return(0x00, datasize(\"Message\"))\n        }\n\n        data \"Message\" \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\"\n    }\n}\n\n/*\n    Good usecase for 100% YUL\n\n        1. deploying lots of small contracts that are easy to read in bytecode form\n        2. doing arbitrage or EVM\n\n    Bad usecase\n    \n        1. need to verified\n        2. medium or large\n*/\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200,
				"details": {
					"yul": true
				}
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/10_pureYul.sol": {
				"Simple": {
					"evm": {
						"assembly": "    /* \"contracts/10_pureYul.sol\":296:315   */\n  dataSize(sub_0)\n  dup1\n    /* \"contracts/10_pureYul.sol\":273:294   */\n  dataOffset(sub_0)\n    /* \"contracts/10_pureYul.sol\":270:271   */\n  0x00\n    /* \"contracts/10_pureYul.sol\":261:316   */\n  codecopy\n    /* \"contracts/10_pureYul.sol\":335:354   */\n  dup1\n    /* \"contracts/10_pureYul.sol\":270:271   */\n  0x00\n    /* \"contracts/10_pureYul.sol\":325:355   */\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/10_pureYul.sol\":545:564   */\n      0x4e\n      dup1\n        /* \"contracts/10_pureYul.sol\":522:543   */\n      data_ccdb1cb6dfde2a876e107ad676cb73532fc8212ed1a07ae2827206fb8660eba1\n        /* \"contracts/10_pureYul.sol\":516:520   */\n      0x00\n        /* \"contracts/10_pureYul.sol\":507:565   */\n      codecopy\n        /* \"contracts/10_pureYul.sol\":591:610   */\n      dup1\n        /* \"contracts/10_pureYul.sol\":516:520   */\n      0x00\n        /* \"contracts/10_pureYul.sol\":578:611   */\n      return\n    stop\n    data_ccdb1cb6dfde2a876e107ad676cb73532fc8212ed1a07ae2827206fb8660eba1 4c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e73656374657475722061646970697363696e6720656c69742c2073656420646f20656975736d6f642074656d706f72\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "605b80600d600039806000f3fe604e80600d600039806000f3fe4c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e73656374657475722061646970697363696e6720656c69742c2073656420646f20656975736d6f642074656d706f72",
							"opcodes": "PUSH1 0x5B DUP1 PUSH1 0xD PUSH1 0x0 CODECOPY DUP1 PUSH1 0x0 RETURN INVALID PUSH1 0x4E DUP1 PUSH1 0xD PUSH1 0x0 CODECOPY DUP1 PUSH1 0x0 RETURN INVALID 0x4C PUSH16 0x72656D20697073756D20646F6C6F7220 PUSH20 0x697420616D65742C20636F6E7365637465747572 KECCAK256 PUSH2 0x6469 PUSH17 0x697363696E6720656C69742C2073656420 PUSH5 0x6F20656975 PUSH20 0x6D6F642074656D706F7200000000000000000000 ",
							"sourceMap": "296:19:0:-:0;;273:21;270:1;261:55;335:19;270:1;325:30"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "604e80600d600039806000f3fe4c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e73656374657475722061646970697363696e6720656c69742c2073656420646f20656975736d6f642074656d706f72",
							"opcodes": "PUSH1 0x4E DUP1 PUSH1 0xD PUSH1 0x0 CODECOPY DUP1 PUSH1 0x0 RETURN INVALID 0x4C PUSH16 0x72656D20697073756D20646F6C6F7220 PUSH20 0x697420616D65742C20636F6E7365637465747572 KECCAK256 PUSH2 0x6469 PUSH17 0x697363696E6720656C69742C2073656420 PUSH5 0x6F20656975 PUSH20 0x6D6F642074656D706F7200000000000000000000 ",
							"sourceMap": "545:19:0:-:0;;522:21;516:4;507:58;591:19;516:4;578:33"
						}
					},
					"abi": [
						{
							"payable": true,
							"stateMutability": "payable",
							"type": "fallback"
						}
					]
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"formattedMessage": "Yul is still experimental. Please use the output with care.",
				"message": "Yul is still experimental. Please use the output with care.",
				"severity": "warning",
				"type": "Warning"
			}
		]
	}
}